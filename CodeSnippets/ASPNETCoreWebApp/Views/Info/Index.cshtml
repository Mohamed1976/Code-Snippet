@*The IViewLocalizer service provides localized strings for a view. The ViewLocalizer
    class implements this interface and finds the resource location from the view file path.
    The following code shows how to use the default implementation of IViewLocalizer:*@
@using ASPNETCoreWebApp.Models

@using Microsoft.AspNetCore.Mvc.Localization

@inject IViewLocalizer Localizer

@inject IHtmlLocalizer<SharedResource> SharedLocalizer

@{
    ViewData["Title"] = Localizer["About"];
}

<h1>Index page of Info</h1>

<p>
    Message set in Controller<strong>@ViewData["Message"]</strong>
</p>
<br />
<p>@Localizer["Use this area to provide additional information."]</p>

<h1>@SharedLocalizer["Hello!"]</h1>

@*The default implementation of IViewLocalizer finds the resource file based on the
    view's file name. There's no option to use a global shared resource file.
    ViewLocalizer implements the localizer using IHtmlLocalizer, so Razor doesn't
    HTML encode the localized string. You can parameterize resource strings and
    IViewLocalizer will HTML encode the parameters, but not the resource string.
    Consider the following Razor markup:

    @Localizer["<i>Hello</i> <b>{0}!</b>", UserManager.GetUserName(User)]
    A French resource file could contain the following:
    Key: <i>Hello</i> <b>{0}!</b>, value: <i>Bonjour</i> <b>{0} !</b>

    Note: You generally want to only localize text and not HTML.

    To use a shared resource file in a view, inject IHtmlLocalizer<T>:
*@



