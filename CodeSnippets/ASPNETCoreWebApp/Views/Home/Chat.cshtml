@{
    ViewBag.Title = "Chat";
}
<h2>@ViewBag.Title</h2>

<div class="container">
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-6">&nbsp;</div>
        <div class="col-6">
            User..........<input type="text" id="userInput" />
            <br />
            Message...<input type="text" id="messageInput" />
            <input type="button" id="sendButton" value="Send Message" />
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-6">&nbsp;</div>
        <div class="col-6">
            <ul id="messagesList"></ul>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>

    <script>
        "use strict";

        var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

        //Disable send button until connection is established
        document.getElementById("sendButton").disabled = true;

        connection.on("ReceiveMessage", function (user, message) {
            var msg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            var encodedMsg = user + " says " + msg;
            var li = document.createElement("li");
            li.textContent = encodedMsg;
            document.getElementById("messagesList").appendChild(li);
        });

        connection.start().then(function () {
            document.getElementById("sendButton").disabled = false;
        }).catch(function (err) {
            return console.error(err.toString());
        });

        document.getElementById("sendButton").addEventListener("click", function (event) {
            var user = document.getElementById("userInput").value;
            var message = document.getElementById("messageInput").value;
            connection.invoke("SendMessage", user, message).catch(function (err) {
                return console.error(err.toString());
            });
            event.preventDefault();
        });

    </script>
}

@*<div class="container">
        <input type="text" id="txtMessage" />
        <input type="button" id="sendMessage" value="Send" onclick="sendMessage();" />

        <div id="DisplayMessages"></div>

    </div>

    @section Scripts {
        <script src="~/lib/signalr/dist/browser/signalr.js"></script>

        <script>
            let connection = new signalR.HubConnection("/chatHub", { transport: signalR.TransportType.LongPolling });

            connection.on('send', data => {
                var DisplayMessagesDiv = document.getElementById("DisplayMessages");
                DisplayMessagesDiv.innerHTML += data;
            });

            connection.start().then(() => connection.invoke('send', 'Hello'));

            function sendMessage() {
                var msg = document.getElementById("txtMessage").value;
                connection.invoke('send', msg);
            }
        </script>
    }*@





@*<div class="container">
        <input type="text" id="message" />
        <input type="button" id="sendmessage" value="Send" />
        <input type="hidden" id="displayname" />
        <ul id="discussion">
        </ul>
    </div>
    @section scripts {
        Script references.
        The jQuery library is required and is referenced by default in _Layout.cshtml.
        Reference the SignalR library.
        <script src="~/lib/signalr/dist/browser/signalr.js"></script>
        script src="~/Scripts/jquery.signalR-2.1.0.min.js"></!script
        Reference the autogenerated SignalR hub script.
        <script src="~/signalr/hubs"></script>
        SignalR script to update the chat page and send messages.
        <script>
            $(function () {
                // Reference the auto-generated proxy for the hub.
                var chat = $.connection.chatHub;
                // Create a function that the hub can call back to display messages.
                chat.client.addNewMessageToPage = function (name, message) {
                    // Add the message to the page.
                    $('#discussion').append('<li><strong>' + htmlEncode(name)
                        + '</strong>: ' + htmlEncode(message) + '</li>');
                };
                // Get the user name and store it to prepend to messages.
                $('#displayname').val(prompt('Enter your name:', ''));
                // Set initial focus to message input box.
                $('#message').focus();
                // Start the connection.
                $.connection.hub.start().done(function () {
                    $('#sendmessage').click(function () {
                        // Call the Send method on the hub.
                        chat.server.send($('#displayname').val(), $('#message').val());
                        // Clear text box and reset focus for next comment.
                        $('#message').val('').focus();
                    });
                });
            });
            // This optional function html-encodes messages for display in the page.
            function htmlEncode(value) {
                var encodedValue = $('<div />').text(value).html();
                return encodedValue;
            }
        </script>
    }*@